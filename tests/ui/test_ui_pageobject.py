from modules.ui.page_objects.main_page import MainPage
from modules.ui.page_objects.product_page import ProductPage
from modules.ui.page_objects.sign_in_page import SignInPage
from modules.ui.page_objects.cart_page import CartPage
from modules.ui.page_objects.checkout_page import CheckoutPage
from modules.ui.page_objects.order_received_page import OrderReceivedPage
import pytest
import time
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

@pytest.mark.ui 
def test_check_incorrect_usermane_page_object():
    # –°—Ç—Ä–≤–æ—Ä–µ–Ω–Ω—è –æ–±—î–∫—Ç—É —Å—Ç–æ—Ä–Ω—ñ–∫–∏
    sign_in_page = SignInPage()
    # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É https://github.com/login
    sign_in_page.go_to()

    # –í–∏–∫–æ–Ω—É—î–º–æ —Å–ø—Ä–æ–±—É —É–≤—ñ–π—Ç–∏ –≤ GitHub
    sign_in_page.try_login("page_object@gmail.com", "wrong_password")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–∑–≤–∞ —Å—Ç–æ—ñ—Ä–Ω–∫–∏ —Ç–∞–∫–∞, —è–∫—É –º–∏ –æ—á—ñ–∫—É—î–º–æ
    assert sign_in_page.check_title("Sign in to GitHub ¬∑ GitHub")

    # –ó–∞—Ä–∏–≤–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä
    sign_in_page.close()



# –Ü–ù–î–ò–í–Ü–î–£–ê–õ–¨–ù–Ü –¢–ï–°–¢–ò –∑ PAGE OBGECT

# –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
@pytest.mark.ui_eros_cat
def test_open_random_for_her_category():
    # –ï—Ç–∞–ø 1: –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    main_page = MainPage()
    expected_main_page_title = "–°–µ–∫—Å-—à–æ–ø ¬´–ï—Ä–æ—Å¬ªüíò–û–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω —ñ–Ω—Ç–∏–º–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –£–∫—Ä–∞—ó–Ω—ñ"
    main_page.go_to()
    assert main_page.check_title(expected_main_page_title)
    print("–ö—Ä–æ–∫ 1: –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞. –ù–∞–∑–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω—ñ–π.")

    # –ï—Ç–∞–ø 2: –í–∏–±—ñ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥
    selected_category_name = main_page.go_to_random_category()
    print(f"–ö—Ä–æ–∫ 2.1: –í–∏–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '{selected_category_name}'.")
    assert main_page.check_title_contains(selected_category_name)
    print("–ö—Ä–æ–∫ 2.2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–∑–≤–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —É—Å–ø—ñ—à–Ω–∞. –í–æ–Ω–∞ –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")


# –¢–µ—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
@pytest.mark.ui_eros_prod
def test_product_title_and_add_to_cart(driver):
    # –ï—Ç–∞–ø 1: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ñ—ñ–∫—Å—Ç—É—Ä–∏ 'driver'
    product_page = ProductPage(driver)
    
    # –ï—Ç–∞–ø 2: –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–æ–≤–∞—Ä—É
    product_page.go_to()
    print("–ö—Ä–æ–∫ 1: –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–æ–≤–∞—Ä—É")
    
    # –ï—Ç–∞–ø 3: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—É –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    product_name_on_page = product_page.get_product_title()
    
    # –ï—Ç–∞–ø 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É —î —á–∞—Å—Ç–∏–Ω–æ—é –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    processed_product_name = product_name_on_page.replace("√ó", "x")
    page_title = product_page.driver.title
    assert processed_product_name in page_title
    print(f"–ö—Ä–æ–∫ 2: –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É ('{product_name_on_page}') —î –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
    
    # –ï—Ç–∞–ø 5: –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç–∏"
    product_page.add_to_cart()
    print("–ö—Ä–æ–∫ 3: –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç–∏'.")
    
    time.sleep(2)
    
    # –ï—Ç–∞–ø 6: –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –∫–æ—à–∏–∫ —á–µ—Ä–µ–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Ö–µ–¥–µ—Ä—ñ
    product_page.go_to_cart_from_header()
    
    # –ï—Ç–∞–ø 7: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ—à–∏–∫–∞ –∑ —ñ—Å–Ω—É—é—á–∏–º –¥—Ä–∞–π–≤–µ—Ä–æ–º
    cart_page = CartPage(driver)
    print("–ö—Ä–æ–∫ 4: –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫–æ—à–∏–∫–∞")
    
    # –ï—Ç–∞–ø 8: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–∑–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ—à–∏–∫–∞
    expected_cart_title = "–ö–æ—à–∏–∫ üíò –Ü–Ω—Ç–∏–º-–ë—É—Ç—ñ–∫ –ï–†–û–°"
    assert cart_page.driver.title == expected_cart_title
    print(f"–ö—Ä–æ–∫ 5: –ù–∞–∑–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ—à–∏–∫–∞ ('{cart_page.driver.title}') –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω—ñ–π")
    
    # –ï—Ç–∞–ø 9: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫—É
    product_name_in_cart = cart_page.get_product_name_in_cart()
    
    assert product_name_in_cart.replace("x", "√ó").strip() == product_name_on_page.strip()
    
    print(f"–ö—Ä–æ–∫ 6: –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫—É ('{product_name_in_cart}') –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞–∑–≤—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Ç–æ–≤–∞—Ä—É. ‚úÖ")
    
    # –ï—Ç–∞–ø 10: –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    cart_page.proceed_to_checkout()
    
    # –ï—Ç–∞–ø 11: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–∑–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    expected_checkout_title = "–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üíò –Ü–Ω—Ç–∏–º-–ë—É—Ç—ñ–∫ –ï–†–û–°"
    assert driver.title == expected_checkout_title
    print(f"–ö—Ä–æ–∫ 8: –ù–∞–∑–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ('{driver.title}') –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω—ñ–π")
    
    # –ï—Ç–∞–ø 12: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    checkout_page = CheckoutPage(driver)
    
    # –ï—Ç–∞–ø 13: –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    checkout_page.fill_in_data("–ê–Ω–¥—Ä—ñ–π", "–°–∞–≤", "096 1111111", "tessssst@ukr.net")
    
    # –ï—Ç–∞–ø 14: –°—Ç–∞–≤–∏–º–æ —á–µ–∫–±–æ–∫—Å "–Ø –∑–≥–æ–¥–µ–Ω –∑ —É–º–æ–≤–∞–º–∏"
    checkout_page.accept_terms()
    
    # –ï—Ç–∞–ø 15: –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
    checkout_page.place_order()
    
    # –ï—Ç–∞–ø 16: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order_received_page = OrderReceivedPage(driver)
    
    # –ï—Ç–∞–ø 17: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    expected_message = "–î—è–∫—É—î–º–æ. –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –æ—Ç—Ä–∏–º–∞–Ω–æ."
    actual_message = order_received_page.get_success_message()
    assert actual_message.strip() == expected_message.strip()
    print(f"–ö—Ä–æ–∫ 12: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ('{actual_message}') –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ–º—É")

    print("–¢–µ—Å—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")